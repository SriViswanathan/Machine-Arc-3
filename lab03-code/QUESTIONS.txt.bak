                           __________________

                            LAB 03 QUESTIONS
                           __________________

Lab Instructions
================

  Follow the instructions below to experiment with topics related to
  this lab.
  - For sections marked QUIZ, fill in an (X) for the appropriate
    response in this file. Use the command 'make test-quiz' to see if
    all of your answers are correct.
  - For sections marked CODE, complete the code indicated. Use the
    command 'make test-code' to check if your code is complete.
  - DO NOT CHANGE any parts of this file except the QUIZ sections as it
    may interfere with the tests otherwise.
  - If your 'QUESTIONS.txt' file seems corrupted, restore it by copying
    over the 'QUESTIONS.txt.bak' backup file.
  - When you complete the exercises, check your answers with 'make test'
    and if all is well, create a zip file with 'make zip' and upload it
    to Gradescope. Ensure that the Autograder there reflects your local
    results.
  - IF YOU WORK IN A GROUP only one member needs to submit and then add
    the names of their group.


Treasuremap Files
=================

  Staff will discuss some aspects of the provided treasure_main.c
  file. This file has some blanks marked with ???? which need to be
  filled in.  It also demonstrates several important techniques that are
  common in C programs.

  When the application is complete, it will run as shown below on the
  provided map1.txt and map2.bin files.

  ,----
  | > make                               # compile
  | gcc -Wall -Werror -g  -c treasure_main.c
  | gcc -Wall -Werror -g  -o treasure_main treasure_main.o treasure.h
  |
  | > ./treasure_main                    # run with no file or type provided
  | usage: ./treasure_main <mode> <treasure_file>
  |
  | > ./treasure_main -txt map1.txt            # run on first treasuremap in text mode
  | Loading treasure map from text file 'map1.txt'
  | Reading map from text file 'map1.txt'
  | Allocating map struct
  | Map is 7 by 5
  | 3 treasures on the map
  | Allocating array of treasure locations
  | Reading treasures
  | Treasure at 1 0 called 'Death_Crystals'
  | Treasure at 3 4 called 'Mega_Seeds'
  | Treasure at 6 3 called 'Flurbo_Stash'
  | Completed file, closing
  | Returning pointer to heap-allocated treasure_t
  |
  | ==TREASURE MAP==
  | .....
  | A....
  | .....
  | ....B
  | .....
  | .....
  | ...C.
  | ================
  | A: Death_Crystals
  | B: Mega_Seeds
  | C: Flurbo_Stash
  |
  | Deallocating map
  |
  |
  | > ./treasure_main -bin map2.bin            # run on second treasuremap
  | Loading treasure map from binary file 'map2.bin'
  | Reading map from binary file 'map2.bin'
  | Allocating map struct
  | Map is 9 by 13
  | 10 treasures on the map
  | Allocating array of treasure locations
  | Reading treasures
  | Treasure at 5 2 called 'Sword'
  | Treasure at 3 8 called 'Gauntlets'
  | Treasure at 4 11 called 'Dusk'
  | Treasure at 8 10 called 'Trident'
  | Treasure at 1 12 called 'Baton'
  | Treasure at 7 9 called 'TheMariner'
  | Treasure at 8 2 called 'Mirror'
  | Treasure at 3 9 called 'Quill'
  | Treasure at 7 0 called 'Nithling'
  | Treasure at 0 11 called 'Gold_Key'
  | Completed file, closing
  | Returning pointer to heap-allocated treasure_t
  | 
  | ==TREASURE MAP==
  | ...........J.
  | ............E
  | .............
  | ........BH...
  | ...........C.
  | ..A..........
  | .............
  | I........F...
  | ..G.......D..
  | ================
  | A: Sword
  | B: Gauntlets
  | C: Dusk
  | D: Trident
  | E: Baton
  | F: TheMariner
  | G: Mirror
  | H: Quill
  | I: Nithling
  | J: Gold_Key
  | 
  | Deallocating map
  `----


QUIZ File Input in treasure_main.c
==================================

  Make sure to study the code and ask questions to resolve the following
  queries about the treasure map application.


Command Line Arguments
~~~~~~~~~~~~~~~~~~~~~~

  The 'treasure_main.c' program is run with command line parameters like
  '> ./treasure_main -txt map1.txt'. How is "-txt" and the file name "map1.txt"
  made available in the 'main()' function?
  - ( ) The 'fscanf()' function is used to read the command line as the
    user types it in.
  - ( ) The global variable 'args' will be an array with 'args[0]' as
    the string "-txt" and 'args[1]' as "map1.txt"
  - ( ) The 'argc' parameter will have value 3 and 'argv[1]' will be a
    pointer to the string "-txt" while 'argv[2]' points to the string "map1.txt"
  - ( ) The 'getenv()' function is used to extract the command line
    arguments from the environment.


Struct Definition
~~~~~~~~~~~~~~~~~

  The 'treasuremap_t' struct is defined in the following location which
  shows its fields (parts):
  - ( ) In the C file 'treasure_main.c'
  - ( ) In the header 'treasure.h'
  - ( ) In the header 'stdio.h'
  - ( ) Trick question: the definition is read from the user typing


File Format
~~~~~~~~~~~

  One important part of completing the 'treasuremap_load_text()' function will
  be to understand the format of the treasuremap files. According to the
  documentation for the function and your observations of the 'map1.txt' and
  'map2.bin' files, which of the following best describes the format of these
  files?
  - ( ) The file looks like how treasure_main prints them, as something
    like
    ,----
    |   ..A..
    |   .....
    |   .....
    |   .....
    |   .B...
    |   .....
    |   ...C.
    `----
    and the application should just read the strings in the file into
    the struct.
  - ( ) The first line has the the size of the treasuremap AND the
    number of treasures in the map (N). There are N remaining lines
    which have treasure positions/descriptions in them.
  - ( ) The first line has the number of rows/columns in the map and
    each remaining line is a row/col/description position of a
    treasure. The number of treasures is not given and must be detected
    using EOF as a return from 'fscanf()'
  - ( ) The file is stored in binary format and is not easily read by
    humans. However, it can be read directly into the struct via
    'fread()'.


Nested Struct Syntax
~~~~~~~~~~~~~~~~~~~~

  During 'treasuremap_load_text()' the following line of code is used to read
  in the row for an individual treasure's location.

  ,----
  | fscanf(file_handle, "%d", &tmap->locations[i].row);
  `----


  Which of the following best describes the syntax used based on the
  'treasuremap_t' type?
  - ( ) 'tmap' is a pointer to a struct so '->' is used to dereference
    it to a field; the 'locations' field is a pointer to an array so
    square braces are used to dereference it. 'fscanf()' needs an
    address so '&' is used.
  - ( ) 'tmap' is a normal struct so '->' is used to access its fields;
    the 'locations' field is a normal array so square braces are used to
    dereference it. 'fscanf()' needs an address so '&' is used.
  - ( ) 'tmap' is a pointer so '&' is used to dereference it with '->'
    getting its field.  The 'locations' field is a normal array so
    square braces are used to dereference it.
  - ( ) Trick Question: The syntax for this line is actually incorrect
    and won't compile. It is a TODO item to fix its syntax.


CODE Complete treasure_main.c
=============================

  Complete the TODO items in the 'treasure_main.c' file so that the two
  functions marked REQUIRED compile and run successfully. Correct output
  will look like the demo shown at the top of this file.

  Test that the code behaves correctly via the command
  ,----
  | make test-code
  `----

  and verify that both code/quiz are correct via
  ,----
  | make test
  `----

  before using
  ,----
  | make zip
  `----

  to create a zip to submit.
